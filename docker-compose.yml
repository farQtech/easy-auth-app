version: '3.3'

services:
  mongo-dev:
    image: mongo:7
    container_name: mongo-dev
    ports:
      - "27017:27017"
    volumes:
      - mongo-dev-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: appdb
    networks:
      - dev-network
    
  # Development services
  api-dev:
    build:
      context: .
      dockerfile: docker/api.dev.Dockerfile
    volumes:
      - ./apps/api:/app/apps/api
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - PORT=3000
      - MONGO_URI=mongodb://mongo-dev:27017/appdb
    depends_on:
      - mongo-dev
    networks:
      - dev-network

  client-dev:
    build:
      context: .
      dockerfile: docker/client.dev.Dockerfile
    volumes:
      - ./apps/client:/app/apps/client
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - VITE_API_URL=http://api-dev:3000
    networks:
      - dev-network

  mongo-prod:
    image: mongo:7
    container_name: mongo-prod
    ports:
      - "27017:27017" # You may omit this in secure/internal-only networks
    volumes:
      - mongo-prod-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: appdb
      MONGO_INITDB_ROOT_USERNAME: produser
      MONGO_INITDB_ROOT_PASSWORD: prodpass
    networks:
      - prod-network

  # Production service
  app-prod:
    build:
      context: .
      dockerfile: docker/prod.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI=mongodb://produser:prodpass@mongo-prod:27017/appdb
    depends_on:
      - mongo-prod
    restart: unless-stopped 
    networks:
      - prod-network

networks:
  dev-network:
    driver: bridge

  prod-network:
    driver: bridge

volumes:
  mongo-dev-data:
  mongo-prod-data: